# Work in progress...

A note on mock versions: 

  There are now two main branches to be aware of:
  	- mock-1.0 (pre-F13 and EPEL5)
	- mock-1.1+ (F-13+ and EPEL6+)
  In the git tree, mock-1.0 is tracked on the branch origin/mock-1.0,
  while mock-1.1+ is in the master branch. Please be careful when
  updating the various distro to use the correct branch and version
  number when generating tarfiles for RPM generation.

=====================================================================

Release checklist overview:

   1) git tree: pull, merge, checkin, tag and push
   2) koji tree: for each release: checkin tarball and spec, kick off builds
   3) bodhi: schedule releases

=====================================================================
For a mock 1.1+ release

In the git tree:

   0) fetch updates from origin and fast forward your local master
      $ git fetch origin
      $ git checkout master
      $ git merge origin/master
   1) create a branch from master (e.g. 'prerelease') and switch to it
      $ git branch prelease master
      $ git checkout prerelease
   2) fetch remotes and merge remote updates
      $ git fetch jkeating
      $ git merge jkeating/updates-for-clark
   3) merge any local branch work and reolve any conflicts
      $ git merge work
   4) update configure.ac with new version info (don't commit yet)
   5) update the %changelog section of mock.spec.in
   6) run 'autogen.sh' to update autoconf files
   7) run 'configure' to generate Makefile and mock.spec
   8) run 'make rpm' to generate binary RPM and propagate version
      changes (Note this also generates a tar file for use later).
   9) verify that docs/runtests.sh uses a supported config file
      (i.e. released fedora minus one). If not, edit and commit
  10) run 'make check' and fix any reported failures until it passes
  11) check in any changes from above
  12) remove ChangeLog and AUTHORS
  13) run 'make dist' to generate ChangeLog and AUTHORS files
  14) commit configure.ac and any other changes with a
      version bump message:
     $ git commit -m 'version bump' configure.ac
  15) tag the git tree:
     $ git tag -u <your key> mock-<version>
  16) checkout master and merge your work directory:
      $ git checkout master
      $ git merge prerelease
  16) push to main git repo (only from master branch):
     $ git push --tags origin master  

In the fedora CVS (koji) tree

    1) update the cvs tree
       $ cvs update
    2) cd to the devel dir and upload the tarball
       $ cd devel
       $ make new-source FILES=../../mock.git/mock-1.1.2.tar.gz
    3) copy the new specfile from the git tree
       $ cp ../../mock.git/mock.spec .
    4) create a changelog entry (clog)
       $ make clog
    5) checkin the new specfile using the clog
       $ cvs commit -F clog 
    6) create the koji tag
       $ make tag
    7) initiate a koji build
       $ make build
    8) repeat above for released tree and released tree -1
    9) repeat builds for EL-6

At this point you should push the just built packages to their
respective testing repositories. This can be done either with the
Bodhi WebUI at https://admin.fedoraproject.org/updates/ or if there
are no other package dependencies, using the 'make update' target of
the CVS Makefile. Note that you do not need to do this for the devel
branch since it automatically gets pushed to testing.

=====================================================================
For a mock 1.0 release

In the git tree:

   0) fetch updates from origin and fast forward your local mock-1.0
      $ git fetch origin
      $ git checkout mock-1.0
      $ git merge origin/mock-1.0
   1) create a branch from mock-1.0 (e.g. 'prerelease') and switch to it
      $ git branch prelease mock-1.0
      $ git checkout prerelease
   2) fetch remotes and merge remote updates
      $ git fetch jkeating
      $ git merge jkeating/mock-1.0-updates
   3) merge any local branch work and reolve any conflicts
      $ git merge work
   4) update configure.ac with new version info (don't commit yet)
   5) update the %changelog section of mock.spec.in
   6) run 'autogen.sh' to update autoconf files
   7) run 'configure' to generate Makefile and mock.spec
   8) run 'make rpm' to generate binary RPM and propagate version
      changes (Note this also generates a tar file for use later).
   9) verify that docs/runtests.sh uses a supported config file
      (i.e. epel5 or F11/F12). If not, edit and commit
  10) run 'make check' and fix any reported failures until it passes
  11) check in any changes from above
  12) remove ChangeLog and AUTHORS
  13) run 'make dist' to generate ChangeLog and AUTHORS files
  14) commit configure.ac and any other changes with a
      version bump message:
     $ git commit -m 'version bump' configure.ac
  15) tag the git tree:
     $ git tag -u <your key> mock-<version>
  16) checkout master and merge your work directory:
      $ git checkout master
      $ git merge prerelease
  16) push to main git repo (only from master branch):
     $ git push --tags origin master  

In the fedora CVS (koji) tree

    1) update the cvs tree
       $ cvs update
    2) cd to the EL-5 dir and upload the tarball
       $ cd EL-5
       $ make new-source FILES=../../mock.git/mock-1.0.9.tar.gz
    3) copy the new specfile from the git tree
       $ cp ../../mock.git/mock.spec .
    4) create a changelog entry (clog)
       $ make clog
    5) checkin the new specfile using the clog
       $ cvs commit -F clog 
    6) create the koji tag
       $ make tag
    7) initiate a koji build
       $ make build
    8) repeat above for released tree and released tree -1
    9) repeat builds for F-11/F-12 (while they're still supported)








